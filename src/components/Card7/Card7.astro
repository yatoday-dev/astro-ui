---
import type {Card7Props as Props} from './types';
import Card0 from '../Card0/Card0.astro';
import {Icon} from 'astro-icon/components';
import {cn} from '../../utils';

const {
  title = await Astro.slots.render('title'),
  description = await Astro.slots.render('description'),
  callToAction,
  as = 'article',
  asHeader = 'h3',
  icon = await Astro.slots.render('icon'),
  classes = {},
} = Astro.props;

const WrapperHeaderTag = asHeader;
const DefaultIcon = 'tabler:chevron-right';

const {
  container: containerClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: iconClass = '',
} = classes;
---

<Card0
  as={as}
  classes={{
    container: cn('flex flex-row p-0', containerClass),
  }}
>
  <div class="flex items-center relative">
    <div class={cn("flex flex-col gap-3 justify-between h-full p-4 ", callToAction && 'border-r dark:border-white/10 border-black/10')}>

      {title && (callToAction ? (
        <a href={callToAction.href} class="flex items-center">
          <WrapperHeaderTag class={cn('text-lg md:text-xl font-bold', titleClass)}>{title}</WrapperHeaderTag>
          <span class="absolute inset-0" aria-hidden="true"></span>
        </a>
      ) : (
        <WrapperHeaderTag class={cn('text-lg md:text-xl font-bold', titleClass)}>{title}</WrapperHeaderTag>
      ))}
      
      {description && (
        <p class={cn('text-muted-foreground text-sm/5 md:text-base', descriptionClass)} set:html={description}/>
      )}

      <slot/>
    </div>

    {callToAction && <Icon name={icon ?? DefaultIcon} class={cn('flex-none size-7 mx-1', iconClass)}/>}
  </div>
</Card0>

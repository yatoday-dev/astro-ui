---
import type { Card4Props as Props } from './types';
import { twMerge } from 'tailwind-merge';
import Card0 from '../Card0/Card0.astro';
import Button from '../Button/Button.astro';
import { Icon } from 'astro-icon/components';
import { cn } from '../../utils';

const {
  title = await Astro.slots.render('title'),
  description = await Astro.slots.render('description'),
  callToAction = await Astro.slots.render('actions'),
  as = 'article',
  asHeader = 'h3',
  icon,
  classes = {},
} = Astro.props;

const WrapperHeaderTag = asHeader;

const {
  container: containerClass = 'p-6 gap-0',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: iconClass = '',
  action: actionClass = '',
} = classes;
---

<Card0
  as={as}
  classes={{
    container: twMerge('flex flex-row', containerClass),
  }}
>
  <div class="flex justify-center">
    {icon && <Icon name={icon} class={twMerge('size-7 mr-2 rtl:mr-0 rtl:ml-2', iconClass)} />}
  </div>
  <div class="flex flex-col gap-3 justify-between">
    <div>
      {
        title && (
          <WrapperHeaderTag class={twMerge('text-lg md:text-xl font-bold', titleClass)}>{title}</WrapperHeaderTag>
        )
      }
      {
        description && (
          <p class={cn('text-muted-foreground text-sm/5 md:text-base', descriptionClass)} set:html={description} />
        )
      }
    </div>

    {
      callToAction && (
        <div>
          <slot name="footer" />

          {Array.isArray(callToAction) ? (
            <div class={cn('flex gap-2', actionClass)}>
              {callToAction.map((action) => (
                <Fragment>
                  {typeof action === 'string' ? <Fragment set:html={action} /> : <Button {...(action || {})} />}
                </Fragment>
              ))}
            </div>
          ) : (
            <Fragment>
              {typeof callToAction === 'string' ? (
                <Fragment set:html={callToAction} />
              ) : (
                <div class={cn('', actionClass)}>
                  <Button {...(callToAction as Object)} />
                </div>
              )}
            </Fragment>
          )}
        </div>
      )
    }
  </div>
</Card0>

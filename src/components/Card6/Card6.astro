---
import type {Card6Props as Props} from './types';
import {Icon} from "astro-icon/components";
import {twMerge} from 'tailwind-merge';
import Card0 from '../Card0/Card0.astro';
import Image from '../Image/Image.astro';
import {cn} from '../../utils';

const {
  title = await Astro.slots.render('title'),
  description,
  callToAction = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  classes = {},
  as = 'article',
  asHeader = 'h3',
  badge = await Astro.slots.render('badge'),
  widths = [800, 1600],
  size = 800,
  sizes = '(max-width: 1600px) 800px, 1600px'
} = Astro.props;

const WrapperHeaderTag = asHeader;

const {
  container: containerClass = '',
  content: contentClass = 'bg-gradient-to-b from-transparent to-black/80',
  title: titleClass = '',
  description: descriptionClass = '',
  image: imageClass = '',
  imageLayout: imageLayout = 'cover',
  badge: badgeClass = 'top-2 left-2',
  aspect: aspectClass = 'pb-[100%]',
} = classes as {
  // Ensure imageLayout is typed as the Layout union, not just string
  imageLayout?: 'fixed' | 'constrained' | 'fullWidth' | 'cover' | 'responsive' | 'contained';
} & Record<string, string>;

const urlForImage = Array.isArray(callToAction)
  ? typeof callToAction[0] === 'string'
    ? callToAction[0]
    : (callToAction[0] as { href?: string })?.href
  : typeof callToAction === 'string'
    ? callToAction
    : (callToAction as { href?: string })?.href;

const LinkWrapperTag = urlForImage ? 'a' : 'div';
---

<Card0
  as={as}
  classes={{
    container: cn('relative h-full bg-gray-200 dark:bg-zinc-700 border-transparent text-inherit justify-start py-0 @container', containerClass),
    badge: badgeClass,
  }}
>
  <!-- Content & link -->
  <LinkWrapperTag href={urlForImage} class={cn("flex flex-col gap-y-2 absolute top-0 right-0 bottom-0 left-0 z-10", image ? 'justify-end' : 'justify-center')}>
    <div class={cn("p-6 @2xl:p-10 pt-8 @2xl:pt-12", contentClass, !image && 'bg-transparent')}>
      {badge && (
        <div class="" set:html={badge}></div>)}

      <WrapperHeaderTag
        class={cn('font-bold text-lg @lg:text-xl @2xl:text-2xl ', urlForImage && 'group-hover:underline', titleClass)}>
        {title}
      </WrapperHeaderTag>

      <div class={cn('text-sm @lg:text-base @2xl:text-lg mt-2 ', descriptionClass)}>
        <slot/>
        {description}
      </div>

      {urlForImage && (
        <div class="size-6 overflow-hidden mt-4 ">
          <div
            class="grid grid-cols-2 w-12 gap-2 duration-400 transition-transform -translate-x-7 group-hover:translate-x-0">
            <Icon name="tabler:arrow-right" class="size-6"/>
            <Icon name="tabler:arrow-right" class="size-6"/>
          </div>
        </div>
      )}
    </div>
  </LinkWrapperTag>
  
  <!-- Image -->
  <div class="relative flex w-full h-full overflow-hidden">

    <!--
      16/9: pb-[56%]
      4/3: pb-[75%]
      1/1: pb-[100%] - default
      6/7: pb-[116%]
      4/5: pb-[125%]
      3/4: pb-[133%]
      9/16: pb-[177%]
    -->
    <div class={cn("relative w-full h-auto", aspectClass)}>
      {image && (
        <Fragment>
          {typeof image === 'string' ? (
            <Fragment set:html={image}/>
          ) : (
            <Image
              class={cn('w-full h-full absolute left-0 top-0 p-0', imageClass)}
              widths={widths}
              width={size}
              height={size}
              sizes={sizes}
              layout={imageLayout}
              loading="lazy"
              decoding="async"
              {...image}
            />
          )}
        </Fragment>
      )}
    </div>
  </div>
</Card0>

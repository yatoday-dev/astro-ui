---
import type { HeroSectionProps as Props } from './types';

import Image from '../Image/Image.astro';
import Button from '../Button/Button.astro';
import { cn } from '../../utils';

const {
  asHeader = 'h3',
  classes = {},
  image = await Astro.slots.render('image'),
  title = await Astro.slots.render('title'),
  description = await Astro.slots.render('description'),
  callToAction,
} = Astro.props;

const urlForImage = Array.isArray(callToAction)
  ? typeof callToAction[0] === 'string'
    ? callToAction[0]
    : (callToAction[0] as { href?: string })?.href
  : typeof callToAction === 'string'
    ? callToAction
    : (callToAction as { href?: string })?.href;

const {
  container: containerClass = 'h-96',
  start: startClass = 'w-full',
  end: endClass = 'w-full',
  image: imageClass = '',
  content: contentClass = 'md:px-12 lg:px-20 xl:px-24',
  title: titleClass = '',
  description: descriptionClass = '',
  action: actionClass = '',
} = classes;

const WrapperHeaderTag = asHeader;
---

<div
  class={cn(
    'overflow-hidden bg-zinc-700 text-zinc-200 dark:bg-card dark:text-card-foreground',
    containerClass
  )}
>
  <div class="flex flex-col-reverse justify-between md:flex-row h-full">
    <div class={cn("flex items-center justify-center", startClass)}>
      <div class={cn('p-6 w-full h-full md:h-auto', contentClass)}>
        {
          title && description && (
            <div class="flex flex-col h-full">
              <div class="mb-6">
                <WrapperHeaderTag
                  class={cn('text-base md:text-lg xl:text-2xl font-medium md:font-semibold mb-2', titleClass)}
                >
                  {title}
                </WrapperHeaderTag>
                <p class={cn('text-sm md:text-base xl:text-lg', descriptionClass)}>{description}</p>
              </div>

              {callToAction && (
                <div class={cn('w-full flex items-center gap-2', actionClass)}>
                  {Array.isArray(callToAction) ? (
                    callToAction.map((action) => (
                      <Fragment>
                        {typeof action === 'string' ? (
                          <Fragment set:html={action} />
                        ) : (
                          <Button {...(action || {})} class="w-full sm:mb-0" />
                        )}
                      </Fragment>
                    ))
                  ) : (
                    <Fragment>
                      {typeof callToAction === 'string' ? (
                        <Fragment set:html={callToAction} />
                      ) : (
                        <Button {...(callToAction as Object)} class="w-full sm:mb-0" />
                      )}
                    </Fragment>
                  )}
                </div>
              )}
            </div>
          )
        }

        <slot />
      </div>
    </div>
    <div class={cn("md:h-auto", endClass)}>
      {
        image && (
          <Fragment>
            {urlForImage ? (
              <a href={urlForImage} class="group">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class={cn('w-full md:h-full bg-gray-400 dark:bg-slate-700', imageClass)}
                    widths={[400, 900]}
                    width={400}
                    height={400}
                    sizes="(max-width: 900px) 400px, 900px"
                    layout="cover"
                    loading="lazy"
                    decoding="async"
                    {...image}
                  />
                )}
              </a>
            ) : (
              <Fragment>
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class={cn('w-full h-full')}
                    widths={[400, 900]}
                    width={400}
                    height={400}
                    sizes="(max-width: 900px) 400px, 900px"
                    layout="cover"
                    loading="lazy"
                    decoding="async"
                    {...image}
                  />
                )}
              </Fragment>
            )}
          </Fragment>
        )
      }
    </div>
  </div>
</div>

---
import type { WidgetFeatures0Props as Props } from './types';
import WidgetWrapper from '../WidgetWrapper/WidgetWrapper.astro';
import Headline from '../Headline/Headline.astro';
import Button from '../Button/Button.astro';
import Image from '../Image/Image.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  isAfterContent = false,
  callToAction = await Astro.slots.render('actions'),
  position = 'center',
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} position={position} />
  <slot />

  {
    callToAction && (
      <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
        {Array.isArray(callToAction) ? (
          callToAction.map((action) => (
            <Fragment>
              {typeof action === 'string' ? (
                <Fragment set:html={action} />
              ) : (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-0" />
                </div>
              )}
            </Fragment>
          ))
        ) : (
          <Fragment>
            {typeof callToAction === 'string' ? (
              <Fragment set:html={callToAction} />
            ) : (
              <div class="flex w-full sm:w-auto">
                <Button {...(callToAction || {})} class="w-full sm:mb-0" />
              </div>
            )}
          </Fragment>
        )}
      </div>
    )
  }
</WidgetWrapper>

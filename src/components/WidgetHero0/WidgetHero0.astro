---
import type { WidgetHero0Props as Props } from './types';
import WidgetWrapper from '../WidgetWrapper/WidgetWrapper.astro';
import Headline from '../Headline/Headline.astro';
import Image from '../Image/Image.astro';
import Stats0 from '../Stats0/Stats0.astro';
import Button from '../Button/Button.astro';
import { cn } from '../../utils';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  position = 'center',
  image,
  actions = [],
  links = [],
  stats = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const { container: containerClass = '', bg: bgClass = '' } = classes;

const img = image
  ? {
      src: typeof image === 'string' ? image : image?.src,
      alt: typeof image === 'string' ? title : image?.alt,
      aspectRatio: typeof image === 'string' ? '16:9' : image?.aspectRatio || '16:9',
    }
  : undefined;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={containerClass as string} bg={bg}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <div class="relative isolate overflow-hidden h-full">
      <div class={cn(' absolute top-0 left-0 w-full h-full z-20', bgClass)}></div>
      {
        img && (
          <Image
            src={img.src}
            class="absolute inset-0 z-10 size-full object-cover object-right md:object-center"
            alt={img.alt}
            aspectRatio={img.aspectRatio}
            widths={[400, 768, 1024, 2040]}
            sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
            loading="eager"
            width={1024}
            height={576}
            layout="fullWidth"
          />
        )
      }
    </div>
  </div>

  <div class={cn('relative z-30', Astro.slots.has('default') && 'grid grid-cols-3 gap-6')}>
    <div class={cn(Astro.slots.has('default') && 'col-span-2')}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: cn(
            'max-w-3xl',
            { 'mx-auto': position === 'center' },
            { 'text-right': position === 'right' },
            { 'text-left': position === 'left' }
          ),
          ...((classes?.headline as Record<string, never>) ?? {}),
        }}
      />

      {
        links.length > 0 && (
          <div
            class={cn(
              'grid grid-cols-1 gap-x-8 gap-y-6 text-base/7 font-semibold sm:grid-cols-2 md:flex lg:gap-x-10 mb-10',
              { 'justify-center': position === 'center' }
            )}
          >
            {links.map((link) => (
              <a href={link.href} class={cn('flex items-center gap-2', { 'justify-center': position === 'center' })}>
                {link.text} <span aria-hidden="true">&rarr;</span>
              </a>
            ))}
          </div>
        )
      }

      {stats.length > 0 && <Stats0 stats={stats} classes={classes?.stats as Record<string, string>} />}

      {
        actions?.length > 0 && (
          <div
            class={cn('grid grid-cols-1 gap-x-4 gap-y-6 text-base/7 font-semibold sm:grid-cols-2 md:flex ', {
              'justify-center': position === 'center',
            })}
          >
            {actions.map((btnProps) => (
              <Button {...btnProps} />
            ))}
          </div>
        )
      }
    </div>

    {
      Astro.slots.has('default') && (
        <div class="w-full">
          <slot />
        </div>
      )
    }
  </div>
</WidgetWrapper>

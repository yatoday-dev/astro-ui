---
import type { BreadcrumbsItemProps as Props } from './types';

const { href = '#', label = 'Breadcrumb', currentPage = false, hasIcon = false, class: classNames } = Astro.props;
---

<li class:list={['item', classNames]} itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem">
  {
    currentPage ? (
      <span aria-current="page" class:list={[hasIcon ? 'has-icon' : '']}>
        {hasIcon ? (
          <Fragment>
            <slot name="icon" />
            <span class="sr-only">{label}</span>
          </Fragment>
        ) : (
          label
        )}
      </span>
    ) : (
      <a href={href} class:list={[hasIcon ? 'has-icon' : '']}>
        {hasIcon ? (
          <Fragment>
            <slot name="icon" />
            <span class="sr-only">{label}</span>
          </Fragment>
        ) : (
          label
        )}
      </a>
    )
  }
  <slot name="separator">
    <span class="separator" aria-hidden="true">/</span>
  </slot>
</li>

<style>
  :where(.item) {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .item :global(.separator) {
    display: flex;
    align-items: center;
  }

  .item :global(.separator svg) {
    margin-block-start: 3px;
  }

  .item :global(svg) {
    inline-size: 1rem;
    block-size: 1rem;
  }

  li.item:last-child :global(.separator) {
    display: none;
  }

  :where(.has-icon) :global(svg) {
    display: flex;
    align-items: center;
  }

  a {
    color: currentColor;
    text-decoration: underline;
    text-underline-offset: 4px;
  }

  a:hover,
  a:focus-visible {
    text-decoration: none;
  }

  span[aria-current='page'] {
    font-weight: 500;
  }
</style>

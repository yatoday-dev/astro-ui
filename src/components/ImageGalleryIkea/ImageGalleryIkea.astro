---
import type { ImageGalleryIkeaProps as Props } from './types';
import { cn } from '../../utils';
import { Icon } from 'astro-icon/components';
import ZoomedImage from '../ZoomedImage/ZoomedImage.astro';
import Image from '../Image/Image.astro';

const {
  id = (Math.random() + 1).toString(36).substring(7),
  withNavigation = true,
  classes = {},
  images = [],
  height = '',
  ...rest
} = Astro.props;

const { container: containerClass = '', swiper: swiperClass = '', swiperThumb: swiperThumbClass = '' } = classes;
---

<style>
  .swiper-thumb .swiper-slide-thumb-active {
    opacity: 1;
    border: 1px solid #666;
  }
</style>

<div class={cn('@container relative', containerClass)} data-image-gallery-ikea={id}>
  <div class="absolute left-0 top-0 z-20 hidden md:block group w-20">
    <!-- Thumb Slider -->
    <button
      disabled="disabled"
      type="button"
      id={`btn-prev-${id}`}
      class="absolute top-0 left-1/2 -translate-x-1/2 transform -translate-y-1/3 btn-shadow opacity-0 group-hover:not-disabled:opacity-90 hover:not-disabled:opacity-100 hidden md:flex items-center justify-center cursor-pointer z-10 size-8 bg-black text-white dark:bg-white dark:text-black rounded-full"
    >
      <Icon name="tabler:chevron-up" class="size-7" />
    </button>
    <button
      type="button"
      id={`btn-next-${id}`}
      class="absolute bottom-0 left-1/2 -translate-x-1/2 transform translate-y-1/3 btn-shadow opacity-0 group-hover:not-disabled:opacity-90 hover:not-disabled:opacity-100 hidden md:flex items-center justify-center cursor-pointer z-10 size-8 bg-black text-white dark:bg-white dark:text-black rounded-full"
    >
      <Icon name="tabler:chevron-down" class="size-7" />
    </button>

    <swiper-container
      id={`swiper-thumb-${id}`}
      data-id={id}
      direction="vertical"
      class={cn(`swiper-thumb border-box ${swiperThumbClass}`, height)}
      space-between="10"
      slides-per-view="auto"
      free-mode="true"
      watch-slides-progress="true"
      navigation={withNavigation
        ? JSON.stringify({
            nextEl: `#btn-next-${id}`,
            prevEl: `#btn-prev-${id}`,
          })
        : false}
      })}
    >
      {
        images &&
          images.map((image) => (
            <swiper-slide class="cursor-pointer border border-input aspect-square size-20">
              <Image
                widths={[200, 400]}
                width={200}
                height={200}
                sizes="(max-width: 400px) 200px, 400px"
                layout="constrained"
                loading="lazy"
                decoding="async"
                {...image}
              />
            </swiper-slide>
          ))
      }
    </swiper-container>
  </div>

  <!-- Main slider -->
  <div class="md:pl-24">
    <div class="relative group">
      <swiper-container
        id={`swiper-main-${id}`}
        init="false"
        class={cn('', swiperClass, height)}
        thumbs-swiper={`#swiper-thumb-${id}`}
        speed="250"
        space-between="10"
        centered-slides="true"
        slides-per-view="1.2"
        navigation={withNavigation
          ? JSON.stringify({
              nextEl: `#btn-main-next-${id}`,
              prevEl: `#btn-main-prev-${id}`,
            })
          : false}
        breakpoints={JSON.stringify({
          // 640: sm
          // 768: sm
          // 1024: sm
          // 1280 xl
          // 1536 2xl
          640: {
            speed: 0,
            centeredSlides: false,
            slidesPerView: 1,
          },
        })}
        {...rest}
      >
        {
          images &&
            images.map((image, index) => (
              <swiper-slide>
                <ZoomedImage {...image} />
              </swiper-slide>
            ))
        }
      </swiper-container>

      {
        withNavigation && (
          <Fragment>
            <button
              type="button"
              id={`btn-main-prev-${id}`}
              class="btn-shadow opacity-0 group-hover:not-disabled:opacity-90 hover:not-disabled:opacity-100 hidden md:flex items-center justify-center cursor-pointer absolute left-5 top-1/2 -translate-y-1/2 z-10 size-12 bg-black text-white dark:bg-white dark:text-black rounded-full transition-opacity"
            >
              <Icon name="tabler:chevron-left" class="size-7" />
            </button>
            <button
              type="button"
              id={`btn-main-next-${id}`}
              class="btn-shadow opacity-0 group-hover:not-disabled:opacity-90 hover:not-disabled:opacity-100 hidden md:flex items-center justify-center cursor-pointer absolute right-5 top-1/2 -translate-y-1/2 z-10 size-12 bg-black text-white dark:bg-white dark:text-black rounded-full transition-opacity"
            >
              <Icon name="tabler:chevron-right" class="size-7" />
            </button>
          </Fragment>
        )
      }
    </div>
  </div>
</div>

<script>
  import { on, get } from '../../utils';

  import { register } from 'swiper/element/bundle';

  register();

  const init = () => {
    const matches = document.querySelectorAll('div[data-image-gallery-ikea]');
    if (!matches.length) return;

    matches.forEach((elem) => {
      const id = (elem as HTMLElement).dataset.imageGalleryIkea || '0';

      // Find the Swiper containers
      const mainSwiperEl = document.getElementById(`swiper-main-${id}`);
      const thumbSwiperEl = document.getElementById(`swiper-thumb-${id}`);
      if (!mainSwiperEl || !thumbSwiperEl) return;

      mainSwiperEl.addEventListener('swiperafterinit', () => {
        (thumbSwiperEl as any)?.swiper.slides.forEach((slide: HTMLElement, index: number) => {
          slide.addEventListener('mouseenter', () => {
            (mainSwiperEl as any)?.swiper.slideTo(index);
          });
        });
      });

      // Thumb Slider navigation buttons
      const btnThumbPrev = get(`#btn-prev-${id}`) as HTMLButtonElement;
      const btnThumbNext = get(`#btn-next-${id}`) as HTMLButtonElement;
      thumbSwiperEl.addEventListener('swiperreachend', () => {
        btnThumbNext.disabled = true;
      });
      thumbSwiperEl.addEventListener('swiperreachbeginning', () => {
        btnThumbPrev.disabled = true;
      });
      thumbSwiperEl.addEventListener('swiperfromedge', () => {
        btnThumbPrev.disabled = false;
        btnThumbNext.disabled = false;
      });

      // Main Slider navigation buttons
      const btnPrev = get(`#btn-main-prev-${id}`) as HTMLButtonElement;
      const btnNext = get(`#btn-main-next-${id}`) as HTMLButtonElement;
      mainSwiperEl.addEventListener('swiperreachend', () => {
        btnNext.disabled = true;
      });
      mainSwiperEl.addEventListener('swiperreachbeginning', () => {
        btnPrev.disabled = true;
      });
      mainSwiperEl.addEventListener('swiperfromedge', () => {
        btnPrev.disabled = false;
        btnNext.disabled = false;
      });

      Object.assign(mainSwiperEl, {});

      mainSwiperEl?.initialize();
    });
  };

  init();
  on(document, 'astro:after-swap', init);
</script>

---
import type { WidgetHero2Props as Props } from './types';
import WidgetWrapper from '../WidgetWrapper/WidgetWrapper.astro';
import Headline from '../Headline/Headline.astro';
import Image from '../Image/Image.astro';
import Stats0 from '../Stats0/Stats0.astro';
import Button from '../Button/Button.astro';
import { cn } from '../../utils';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),
  position = 'center',

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const { container: containerClass = '' } = classes;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`py-0 md:py-0 lg:py-0 ${containerClass as string}`} bg={bg}>
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <!--<div class="pt-0 md:pt-[76px] pointer-events-none"></div>-->
    <div class="py-12 md:py-20">
      <div class="text-center max-w-5xl mx-auto">
        {tagline && <p class="text-base text-muted-foreground font-bold tracking-wide uppercase" set:html={tagline} />}
        {
          title && (
            <h1
              class="text-5xl md:text-6xl font-bold leading-tighter tracking-tighter font-heading"
              set:html={title}
            />
          )
        }
        <div class="max-w-3xl mx-auto">
          {subtitle && <p class="text-xl text-muted-foreground mt-4" set:html={subtitle} />}
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 mt-6">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div class="">
        {
          image && (
            <div class="relative m-auto max-w-5xl mt-10 md:mt-16 ">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  height={576}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

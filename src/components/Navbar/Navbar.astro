---
import type { NavbarProps as Props } from './types';

import { SITE } from 'vendor:config';
import { Icon } from 'astro-icon/components';
import DarkMode from '../DarkMode/DarkMode.astro';
import ToggleMenu from './ToggleMenu.astro';
import Button from '../Button/Button.astro';
import WidgetWrapper from '../WidgetWrapper/WidgetWrapper.astro';
import { cn, trimSlash } from '../../utils';
import { twMerge } from 'tailwind-merge';

const {
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  showToggleTheme = false,
  position = 'center',
  classes = {},
  scrollOffset = 60,
  as = 'header',
  bg = await Astro.slots.render('bg'),
} = Astro.props;

const {
  header: headerClass = '',
  container: containerClass = 'max-w-7xl 2xl:max-w-[96rem] md:mx-auto',
  links: linksClass = 'hover:text-link dark:hover:text-white',
  dropdown: dropdownClass = 'bg-background text-foreground md:shadow-lg',
  dropdownLinks: dropdownLinksClass = 'hover:bg-black/10 hover:text-link dark:hover:text-white dark:hover:bg-white/10',
  darkModeIcon: darkModeIconClass = '',
  pinned: pinnedClasses = 'bg-background md:bg-background/90 md:backdrop-blur-md',
  unpinned: unpinnedClasses = '',
} = classes;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<WidgetWrapper
  id="header"
  isDark={isDark}
  bg={bg}
  as={as}
  class={cn(
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    '-top-[1px] z-40 flex-none w-full transition-[opacity] ease-in-out',
    headerClass,
    unpinnedClasses
  )}
  containerClass={twMerge('py-0 md:py-0 lg:py-0', containerClass)}
  {...isSticky ? { 'data-yt-sticky-header': true } : {}}
  data-scroll-offset={scrollOffset}
  data-pinned-classes={pinnedClasses}
  data-unpinned-classes={unpinnedClasses}
>
  <div
    class={cn(
      'relative text-default py-3 mx-auto w-full',
      { 'md:flex md:justify-between': position !== 'center' },
      { 'md:grid md:grid-cols-3 md:items-center': position === 'center' }
    )}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between items-center']}>
      <!-- Logo -->
      <slot name="logo">
        <span>{SITE.name}</span>
      </slot>
      <div class="flex items-center md:hidden">
        <slot name="toggle-menu">
          <ToggleMenu />
        </slot>
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto hidden md:flex md:mx-5 text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class={cn('px-4 py-3 flex items-center whitespace-nowrap cursor-pointer', linksClass)}
                  >
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>
                  <ul
                    class={cn(
                      'dropdown-menu rounded-sm md:absolute pl-4 md:pl-0 pb-1 md:hidden font-medium md:min-w-60',
                      dropdownClass
                    )}
                  >
                    {links.map(({ text: text2, href: href2 }) => (
                      <li class="px-1">
                        <a
                          class={cn(
                            'first:rounded-t last:rounded-b py-2 px-5 block whitespace-no-wrap',
                            { 'link-active': href2 === currentPath },
                            dropdownLinksClass
                          )}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class={cn([
                    'px-4 py-3 flex items-center whitespace-nowrap',
                    { 'link-active': href === currentPath },
                    linksClass,
                  ])}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
      data-yt-actions
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <DarkMode iconClass={cn('w-6 h-6 md:w-5 md:h-5 md:inline-block', darkModeIconClass)} />}
        </div>

        <!-- Actions Buttons -->
        <slot name="actions">
          {
            actions?.length ? (
              <span class="ml-4 rtl:ml-0 rtl:mr-4">
                {actions.map((btnProps) => (
                  <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto" />
                ))}
              </span>
            ) : (
              ''
            )
          }
        </slot>
      </div>
    </div>
  </div>
</WidgetWrapper>

<style>
  #header.expanded nav {
    position: fixed;
    top: 70px;
    left: 0;
    right: 0;
    bottom: 70px !important;
    padding: 0 5px;
  }

  .dropdown:focus .dropdown-menu,
  .dropdown:focus-within .dropdown-menu,
  .dropdown:hover .dropdown-menu {
    display: block;
  }
</style>

<script>
  import { attachEvent, toggleClasses, addClasses, removeClasses } from '../../utils/DOMUtils';

  const addEventListeners = () => {
    const header = document.querySelector('[data-yt-sticky-header]') as HTMLElement;
    if (!header) return;

    const scrollOffset = Number(header.dataset.scrollOffset) || 0;
    const pinnedClasses = header.dataset.pinnedClasses || '';
    const unpinnedClasses = header.dataset.unpinnedClasses || '';

    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('[data-yt-toggle-menu]', 'click', (_: Event, elem: HTMLElement) => {
      toggleClasses(elem, 'expanded');
      toggleClasses(document.body, 'overflow-hidden');
      toggleClasses(document.getElementById('header'), 'h-screen', 'expanded');
      toggleClasses('[data-yt-sticky-header] nav', 'hidden');
      toggleClasses('[data-yt-actions]', 'hidden');
    });

    attachEvent('[data-yt-sticky-header] nav', 'click', () => {
      hiddenNav();
    });

    attachEvent([window.matchMedia('(max-width: 767px)')], 'change', () => {
      hiddenNav();
    });

    function hiddenNav() {
      removeClasses('[data-yt-toggle-menu]', 'expanded');
      removeClasses(document.body, 'overflow-hidden');
      removeClasses(document.getElementById('header'), 'h-screen', 'expanded');
      addClasses('[data-yt-sticky-header] nav', 'hidden');
      addClasses('[data-yt-actions]', 'hidden');
    }

    function applyHeaderStylesOnScroll() {
      if (lastKnownScrollPosition > scrollOffset && !header.classList.contains('scroll')) {
        addClasses(header, 'scroll', ...pinnedClasses.split(' '));
        removeClasses(header, ...unpinnedClasses.split(' '));
      } else if (lastKnownScrollPosition <= scrollOffset && header.classList.contains('scroll')) {
        removeClasses(header, 'scroll', ...pinnedClasses.split(' '));
        addClasses(header, ...unpinnedClasses.split(' '));
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });
  };

  addEventListeners();
</script>
